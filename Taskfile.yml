version: '3'
silent: true

dotenv: ['.env', '{{.ENV}}/.env.', '{{.HOME}}/.env']

includes:
  concourse: ./charts/concourse.yaml
  drone: ./charts/drone.yaml
  jenkins: ./charts/jenkins.yaml

tasks:
  default:
    cmds:
      - task: repos
      - task: start
      - task: ingress
      - task: deploy:example

  start:
    desc: Starts your local k3d cluster based on a file defined setup
    preconditions:
      - sh: "which k3d"
        msg: "k3d {{.PATH_ERROR}}"
    summary: |
      Starts a k3d cluster based on configuration
      as specs for the cluster to be provisioned upon.
    cmds:
      - k3d cluster delete testing
      - k3d cluster create --config config/cluster.yaml --wait
    ignore_error: true
  tls:
    desc: Uses Mkcert to generate local SSL/TLS certificates and installs on a cluster-wide level using Nginx-ingress.
    dir: config/tls
    cmds:
      - rm cert.pem key.pem ca.pem
      - mkcert -cert-file cert.pem -key-file key.pem -p12-file p12.pem "*.k8s.localhost" localhost "*.localhost" ::1 127.0.0.1 localhost 127.0.0.1 "*.internal.localhost" "*.local" "*.power.local.gd" "*.local.gd" local.gd power.local.gd power.loca.it "*.power.loca.it" "*.loca.it"
      - base64 {{if eq OS "darwin"}}-b{{else}}-w{{end}} 0 cert.pem > ca.pem
      - kubectl config set-context --current --namespace=kube-system
      - kubectl create secret tls tls-secret --cert=cert.pem --key=key.pem --dry-run=client -o yaml >base/tls-secret.yaml
      - kubectl apply -k ./
    ignore_error: true
  ingress:
    dir: config/ingress
    cmds:
      - helm install --namespace kube-system -f ingress-values.yaml ingress bitnami/nginx-ingress-controller
  repos:
    cmds:
      - helm repo add bitnami https://charts.bitnami.com/bitnami
      - helm repo add drone https://charts.drone.io
      - helm repo add concourse https://concourse-charts.storage.googleapis.com/
      - helm repo add hashicorp https://helm.releases.hashicorp.com
      - helm repo update
    ignore_error: true

  deploy:example:
    cmds:
      - kubectl create namespace example
      - kubectl apply -k ./example
    ignore_error: true

  vault:
    desc: Installs Hashicorp's Vault as a deployment ontop of your local Kubernetes cluster
    preconditions:
      - sh: "which jq"
        msg: "On MacOS type 'brew install jq' to install the required dependency"
    dir: config/vault
    cmds:
      - rm cluster-keys.json
      - kubectl delete namespace vault  > /dev/null
      - kubectl create namespace vault  > /dev/null
      - kubectl config set-context --current --namespace=vault
      - helm install vault hashicorp/vault --wait --namespace vault  > /dev/null
      - sleep 20
      - kubectl exec vault-0 -- vault operator init -key-shares=1 -key-threshold=1 -format=json > cluster-keys.json
      - kubectl apply -k ./
      - echo -e "\nVault's Unseal Key:"
      - cat cluster-keys.json | jq -r ".unseal_keys_b64[]"
      - echo -e "\nVault's Root Token:"
      - cat cluster-keys.json | jq -r ".root_token"
      - echo "Go to https://vault.local.gd and unseal the Vault through the dashboard"
      - echo "Now run 'task vault:set' to complete Vault's initialization AFTER unsealing the UI"
    ignore_error: true

  vault:set:
    preconditions:
      - sh: "which vault"
        msg: "On MacOS type 'brew install vault' to install the required dependency Vault's CLI tool"
    env:
      VAULT_TOKEN:
        sh: cat cluster-keys.json | jq -r ".root_token"
      VAULT_ADDR: https://vault.local.gd
      VAULT_SKIP_VERIFY: "true"
    dir: config/vault
    cmds:
      - export VAULT_TOKEN={{.VAULT_TOKEN}}
      - export VAULT_ADDR=https://vault.local.gd
      - vault login $VAULT_TOKEN
      - vault secrets enable -path=secret/ kv
      - vault kv put secret/foo bar=baz
      - vault kv get -format=json secret/foo
    ignore_error: true